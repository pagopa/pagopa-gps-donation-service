parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - prerelease
      - skip
    default: skip
  - name: TEST
    displayName: Run tests
    type: boolean
    default: false

variables:

  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-dev-linux'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-uat-linux'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY)
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
    poolImage: 'pagopa-prod-linux'
  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}

  # Image Repository Name
  imageRepository: '$(IMAGE_REPOSITORY)'
  nameSpace: '$(K8S_NAMESPACE)'

  title: ""
  sha: ""
  tag: ""

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v2.2.2
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a release on GitHub
  - stage: release_service
    # bump version if SEMVER is not 'skip'
    condition: ne('${{ parameters.SEMVER }}', 'skip')
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: releaseService
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
              gitReference: $(SOURCE_BRANCH)

          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              semver: '${{ parameters.SEMVER }}'
              release_branch: $(SOURCE_BRANCH)
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)



  # Prepare Artifact with application bundle
  - stage: prepare_artifact
    condition: not(failed('release_service'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: 'make_build'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
              gitReference: $(SOURCE_BRANCH)

          - script: yarn test
            displayName: 'Test'

          - script: yarn build
            displayName: 'Build'

          - task: Bash@3
            displayName: Get Node version
            name: getVersion
            inputs:
              targetType: 'inline'
              script: |
                version=$(node -p "require('./package.json').version")
                echo "##vso[task.setvariable variable=value;isOutput=true]$version"


          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(IMAGE_REPOSITORY)'
              command: 'buildAndPush'
              tags: |
                $(Build.BuildId)
                latest
                $(getVersion.value)

  # Deploy on K8s with Helm
  - stage: Deploy
    #    condition: not(failed('Smoke_Test'))
    dependsOn:
      - Release
      - Build
    #      - Smoke_Test
    variables:
      deploy_version: $[ stageDependencies.Release.make_release.outputs['current_version.value'] ]
    jobs:
      - deployment: "deploy"
        pool:
          name: $(poolImage)
        environment: ${{ parameters['ENV'] }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true

                - script: |
                    git checkout $(sourceBranch)
                  displayName: Checkout and update branch

                - template: templates/helm-microservice-chart-setup/template.yaml@pagopaCommons
                  parameters:
                    DEPLOY_VERSION: $(deploy_version)

                - template: templates/helm-microservice-chart-deploy/template.yaml@pagopaCommons
                  parameters:
                    DO_DEPLOY: true
                    ENV: ${{ parameters['ENV'] }}
                    KUBERNETES_SERVICE_CONN: ${{ variables.kubernetesServiceConnection }}
                    NAMESPACE: $(nameSpace)
                    APP_NAME: $(imageRepository)
                    VALUE_FILE: "helm/values-${{ parameters['ENV'] }}.yaml"
                    DEPLOY_VERSION: $(deploy_version)
                    APPINSIGHTS_SERVICE_CONN: ${{ variables.appInsightsServiceConn }}
                    APPINSIGHTS_RESOURCE_ID: ${{ variables.appInsightsResourceId }}
