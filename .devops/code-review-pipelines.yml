# Azure DevOps pipeline to build, check source codes and run tests.
#
# To make Danger JS run on a pull request you need to add the following pipeline
# variable and set it with a GitHub access token (scope public_repo); otherwise
# set its value to 'skip' without marking it secret:
# - DANGER_GITHUB_API_TOKEN
#

# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger: none


variables:
  NODE_VERSION: '14.19.0'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn


# Execute agents (jobs) on latest Ubuntu version.
# To change OS for a specific, override "pool" attribute inside the job definition
pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v15
      endpoint: 'io-azure-devops-github-ro'


stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: make_build
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - script: |
              yarn build
            displayName: 'Build'

  - stage: Static_analysis
    dependsOn: []
    jobs:
      - job: lint
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - script: |
              yarn lint
            displayName: 'Lint'

      - job: danger
        condition:
          and(
          succeeded(),
          ne(variables['DANGER_GITHUB_API_TOKEN'], 'skip')
          )
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons

          - bash: |
              yarn danger ci
            env:
              DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
            displayName: 'Danger CI'


  # B) Run unit tests if there is a push or pull request on any branch.
  - stage: Test
    dependsOn: []
    jobs:
      - job: unit_tests
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons

          - script: |
              yarn test
            displayName: 'Unit tests exec'

  - stage: Sonarcloud
    dependsOn: []
    jobs:
        - job: sonarcloud_analysis
          steps:
            - template: templates/node-job-setup/template.yaml@pagopaCommons

            - task: SonarCloudPrepare@1
              displayName: 'Prepare SonarCloud analysis configuration'
              inputs:
                SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
                organization: '$(SONARCLOUD_ORG)'
                scannerMode: 'CLI'
                configMode: 'file'

            - script: yarn test
              displayName: 'Unit tests execution'

            - script: yarn lint
              displayName: 'Lint execution'

            - task: SonarCloudAnalyze@1

            - task: SonarCloudPublish@1
              inputs:
                pollingTimeoutSec: '300'
              displayName: 'Publish SonarCloud results on build summary'

